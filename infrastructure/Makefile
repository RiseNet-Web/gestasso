# Makefile pour l'Infrastructure GestAsso - Symfony 7.2
.PHONY: help install start stop restart build logs clean test

# Variables
DOCKER_COMPOSE = docker-compose
PHP_CONTAINER = $(shell grep PHP_CONTAINER_NAME .env 2>/dev/null | cut -d '=' -f2 || echo "gestasso_infra_php")
POSTGRES_CONTAINER = $(shell grep POSTGRES_CONTAINER_NAME .env 2>/dev/null | cut -d '=' -f2 || echo "gestasso_infra_postgres")
REDIS_CONTAINER = $(shell grep REDIS_CONTAINER_NAME .env 2>/dev/null | cut -d '=' -f2 || echo "gestasso_infra_redis")

# Couleurs pour l'affichage
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

## Affiche l'aide
help:
	@echo "$(GREEN)GestAsso Infrastructure - Symfony 7.2$(NC)"
	@echo ""
	@echo "$(YELLOW)Installation et configuration:$(NC)"
	@echo "  install     - Installation compl√®te de l'infrastructure"
	@echo "  setup       - Configuration initiale"
	@echo "  init-symfony - Initialise le projet Symfony"
	@echo ""
	@echo "$(YELLOW)Gestion des conteneurs:$(NC)"
	@echo "  start       - D√©marre tous les services"
	@echo "  stop        - Arr√™te tous les services"
	@echo "  restart     - Red√©marre tous les services"
	@echo "  build       - Reconstruit les images Docker"
	@echo "  logs        - Affiche les logs en temps r√©el"
	@echo "  status      - Affiche le statut des conteneurs"
	@echo ""
	@echo "$(YELLOW)Base de donn√©es:$(NC)"
	@echo "  db-create   - Cr√©e la base de donn√©es"
	@echo "  db-migrate  - Ex√©cute les migrations"
	@echo "  db-fixtures - Charge les fixtures"
	@echo "  db-reset    - Recr√©e la base de donn√©es"
	@echo "  db-backup   - Sauvegarde la base de donn√©es"
	@echo ""
	@echo "$(YELLOW)D√©veloppement Symfony:$(NC)"
	@echo "  cache-clear - Vide le cache Symfony"
	@echo "  jwt-keys    - G√©n√®re les cl√©s JWT"
	@echo "  make-entity - Cr√©e une nouvelle entit√©"
	@echo "  make-controller - Cr√©e un nouveau contr√¥leur"
	@echo "  make-migration - Cr√©e une nouvelle migration"
	@echo ""
	@echo "$(YELLOW)Frontend:$(NC)"
	@echo "  frontend-install - Installe les d√©pendances frontend"
	@echo "  frontend-build - Build le frontend pour production"
	@echo "  frontend-dev - D√©marre le serveur de d√©veloppement frontend"
	@echo ""
	@echo "$(YELLOW)Tests et qualit√©:$(NC)"
	@echo "  test        - Lance tous les tests"
	@echo "  phpunit     - Lance PHPUnit"
	@echo "  phpstan     - Analyse statique du code"
	@echo "  cs-fix      - Corrige le style de code"
	@echo ""
	@echo "$(YELLOW)Maintenance:$(NC)"
	@echo "  clean       - Nettoie les fichiers temporaires"
	@echo "  permissions - Corrige les permissions"
	@echo "  shell       - Acc√®s au conteneur PHP"
	@echo "  env-show    - Affiche les variables d'environnement"

## Installation compl√®te
install: env-check build start init-symfony
	@echo "$(GREEN)‚úÖ Infrastructure install√©e!$(NC)"
	@echo "$(YELLOW)Acc√®s:$(NC)"
	@echo "  - Frontend: http://localhost:$(shell grep NGINX_PORT .env 2>/dev/null | cut -d '=' -f2 || echo "8080")"
	@echo "  - API Symfony: http://localhost:$(shell grep NGINX_PORT .env 2>/dev/null | cut -d '=' -f2 || echo "8080")/api"
	@echo "  - API Docs: http://localhost:$(shell grep NGINX_PORT .env 2>/dev/null | cut -d '=' -f2 || echo "8080")/api/docs"
	@echo "  - Profiler: http://localhost:$(shell grep NGINX_PORT .env 2>/dev/null | cut -d '=' -f2 || echo "8080")/_profiler"
	@echo "  - pgAdmin: http://localhost:$(shell grep PGADMIN_PORT .env 2>/dev/null | cut -d '=' -f2 || echo "8081")"
	@echo "  - MailHog: http://localhost:$(shell grep MAILHOG_WEB_PORT .env 2>/dev/null | cut -d '=' -f2 || echo "8025")"
	@echo "  - Frontend Dev: http://localhost:$(shell grep FRONTEND_DEV_PORT .env 2>/dev/null | cut -d '=' -f2 || echo "3000")"

## V√©rification du fichier .env
env-check:
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)üìù Cr√©ation du fichier .env depuis env.example...$(NC)"; \
		cp env.example .env; \
		echo "$(GREEN)‚úÖ Fichier .env cr√©√©. Vous pouvez le modifier selon vos besoins.$(NC)"; \
	fi

## Configuration initiale
setup: env-check
	@echo "$(YELLOW)üîß Configuration initiale...$(NC)"
	@mkdir -p $(shell grep BACKEND_PATH .env 2>/dev/null | cut -d '=' -f2 || echo "../backend")/var/log
	@mkdir -p $(shell grep BACKEND_PATH .env 2>/dev/null | cut -d '=' -f2 || echo "../backend")/var/cache
	@mkdir -p $(shell grep BACKEND_PATH .env 2>/dev/null | cut -d '=' -f2 || echo "../backend")/public/uploads
	@mkdir -p $(shell grep BACKEND_PATH .env 2>/dev/null | cut -d '=' -f2 || echo "../backend")/config/jwt
	@mkdir -p $(shell grep FRONTEND_PATH .env 2>/dev/null | cut -d '=' -f2 || echo "../frontend")/dist
	@mkdir -p $(shell grep FRONTEND_PATH .env 2>/dev/null | cut -d '=' -f2 || echo "../frontend")/src
	@chmod -R 755 $(shell grep BACKEND_PATH .env 2>/dev/null | cut -d '=' -f2 || echo "../backend")/
	@chmod -R 755 $(shell grep FRONTEND_PATH .env 2>/dev/null | cut -d '=' -f2 || echo "../frontend")/
	@echo "$(GREEN)‚úÖ Configuration termin√©e$(NC)"

## Initialise Symfony
init-symfony:
	@echo "$(YELLOW)üöÄ Initialisation de Symfony 7.2...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) bash -c "if [ ! -f composer.json ]; then symfony new . --version='7.2.*' --webapp --no-git; fi"
	@echo "$(GREEN)‚úÖ Symfony initialis√©$(NC)"

## D√©marre les services
start:
	@echo "$(YELLOW)üöÄ D√©marrage des services...$(NC)"
	@$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"

## Arr√™te les services
stop:
	@echo "$(YELLOW)üõë Arr√™t des services...$(NC)"
	@$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s$(NC)"

## Red√©marre les services
restart: stop start

## Reconstruit les images
build:
	@echo "$(YELLOW)üî® Construction des images Docker...$(NC)"
	@$(DOCKER_COMPOSE) build --no-cache
	@echo "$(GREEN)‚úÖ Images construites$(NC)"

## Affiche les logs
logs:
	@$(DOCKER_COMPOSE) logs -f

## Affiche le statut des conteneurs
status:
	@$(DOCKER_COMPOSE) ps

## Cr√©e la base de donn√©es
db-create:
	@echo "$(YELLOW)üóÑÔ∏è Cr√©ation de la base de donn√©es...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console doctrine:database:create --if-not-exists
	@echo "$(GREEN)‚úÖ Base de donn√©es cr√©√©e$(NC)"

## Ex√©cute les migrations
db-migrate:
	@echo "$(YELLOW)üîÑ Ex√©cution des migrations...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console doctrine:migrations:migrate --no-interaction
	@echo "$(GREEN)‚úÖ Migrations ex√©cut√©es$(NC)"

## Charge les fixtures
db-fixtures:
	@echo "$(YELLOW)üå± Chargement des fixtures...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console doctrine:fixtures:load --no-interaction
	@echo "$(GREEN)‚úÖ Fixtures charg√©es$(NC)"

## Recr√©e la base de donn√©es
db-reset:
	@echo "$(YELLOW)üóÑÔ∏è Recr√©ation de la base de donn√©es...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console doctrine:database:drop --force --if-exists
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console doctrine:database:create
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console doctrine:migrations:migrate --no-interaction
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console doctrine:fixtures:load --no-interaction
	@echo "$(GREEN)‚úÖ Base de donn√©es recr√©√©e$(NC)"

## Sauvegarde la base de donn√©es
db-backup:
	@echo "$(YELLOW)üíæ Sauvegarde de la base de donn√©es...$(NC)"
	@mkdir -p backups
	@$(DOCKER_COMPOSE) exec $(POSTGRES_CONTAINER) pg_dump -U gestasso_user gestasso_db > backups/gestasso_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e dans backups/$(NC)"

## Vide le cache Symfony
cache-clear:
	@echo "$(YELLOW)üóëÔ∏è Vidage du cache Symfony...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console cache:clear
	@echo "$(GREEN)‚úÖ Cache vid√©$(NC)"

## G√©n√®re les cl√©s JWT
jwt-keys:
	@echo "$(YELLOW)üîê G√©n√©ration des cl√©s JWT...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console lexik:jwt:generate-keypair --skip-if-exists
	@echo "$(GREEN)‚úÖ Cl√©s JWT g√©n√©r√©es$(NC)"

## Cr√©e une nouvelle entit√©
make-entity:
	@echo "$(YELLOW)üìù Cr√©ation d'une nouvelle entit√©...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console make:entity

## Cr√©e un nouveau contr√¥leur
make-controller:
	@echo "$(YELLOW)üéÆ Cr√©ation d'un nouveau contr√¥leur...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console make:controller

## Cr√©e une nouvelle migration
make-migration:
	@echo "$(YELLOW)üîÑ Cr√©ation d'une nouvelle migration...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console make:migration

## Lance tous les tests
test:
	@echo "$(YELLOW)üß™ Lancement des tests...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/phpunit
	@echo "$(GREEN)‚úÖ Tests termin√©s$(NC)"

## Lance PHPUnit
phpunit:
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/phpunit

## Analyse statique du code
phpstan:
	@echo "$(YELLOW)üîç Analyse statique du code...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) vendor/bin/phpstan analyse src --level=8

## Corrige le style de code
cs-fix:
	@echo "$(YELLOW)üîß Correction du style de code...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) vendor/bin/php-cs-fixer fix src
	@echo "$(GREEN)‚úÖ Style de code corrig√©$(NC)"

## Nettoie les fichiers temporaires
clean:
	@echo "$(YELLOW)üßπ Nettoyage...$(NC)"
	@$(DOCKER_COMPOSE) down --volumes --remove-orphans
	@docker system prune -f
	@rm -rf ../backend/var/cache/* ../backend/var/log/*
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

## Corrige les permissions
permissions:
	@echo "$(YELLOW)üîê Correction des permissions...$(NC)"
	@chmod -R 755 ../backend/var ../backend/public/uploads
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) chown -R www-data:www-data /var/www/symfony/var /var/www/symfony/public/uploads
	@echo "$(GREEN)‚úÖ Permissions corrig√©es$(NC)"

## Acc√®s au conteneur PHP
shell:
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) bash

## Acc√®s √† PostgreSQL
psql:
	@$(DOCKER_COMPOSE) exec $(POSTGRES_CONTAINER) psql -U gestasso_user -d gestasso_db

## Acc√®s √† Redis CLI
redis-cli:
	@$(DOCKER_COMPOSE) exec $(REDIS_CONTAINER) redis-cli -a gestasso_redis_password

## Installation des d√©pendances Composer
composer-install:
	@echo "$(YELLOW)üì¶ Installation des d√©pendances Composer...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) composer install --optimize-autoloader
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

## Mise √† jour des d√©pendances
composer-update:
	@echo "$(YELLOW)üîÑ Mise √† jour des d√©pendances...$(NC)"
	@$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) composer update
	@echo "$(GREEN)‚úÖ D√©pendances mises √† jour$(NC)"

## Installe les d√©pendances frontend
frontend-install:
	@echo "$(YELLOW)üì¶ Installation des d√©pendances frontend...$(NC)"
	@$(DOCKER_COMPOSE) exec frontend npm install
	@echo "$(GREEN)‚úÖ D√©pendances frontend install√©es$(NC)"

## Build le frontend pour production
frontend-build:
	@echo "$(YELLOW)üî® Build du frontend...$(NC)"
	@$(DOCKER_COMPOSE) exec frontend npm run build
	@echo "$(GREEN)‚úÖ Frontend build√©$(NC)"

## D√©marre le serveur de d√©veloppement frontend
frontend-dev:
	@echo "$(YELLOW)üöÄ D√©marrage du serveur de d√©veloppement frontend...$(NC)"
	@$(DOCKER_COMPOSE) exec frontend npm run dev

## Affiche les variables d'environnement
env-show:
	@echo "$(YELLOW)üìã Variables d'environnement actuelles:$(NC)"
	@if [ -f .env ]; then \
		echo "$(GREEN)Fichier .env trouv√©:$(NC)"; \
		cat .env | grep -v '^#' | grep -v '^$$'; \
	else \
		echo "$(RED)‚ùå Fichier .env non trouv√©. Utilisez 'make env-check' pour le cr√©er.$(NC)"; \
	fi 