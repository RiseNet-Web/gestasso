services:
  # Serveur web Nginx
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile.alternative
    container_name: ${NGINX_CONTAINER_NAME:-gestasso_infra_nginx}
    ports:
      - "${NGINX_PORT:-8080}:80"
      - "${NGINX_SSL_PORT:-8443}:443"
    volumes:
      - ${BACKEND_PATH:-../backend}:/var/www/symfony
      - ${FRONTEND_PATH:-../frontend}:/var/www/frontend
      - ./docker/nginx/nginx.conf:/tmp/nginx-config/nginx.conf:ro
      - ./docker/nginx/default.conf:/tmp/nginx-config/default.conf:ro
    depends_on:
      - php
      - frontend
    networks:
      - gestasso_infra_network

  # PHP 8.3 avec Symfony 7.2 (Backend)
  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: ${PHP_CONTAINER_NAME:-gestasso_infra_php}
    volumes:
      - ${BACKEND_PATH:-../backend}:/var/www/symfony
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - ./docker/php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
    environment:
      - APP_ENV=${APP_ENV:-dev}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-gestasso_user}:${POSTGRES_PASSWORD:-gestasso_password}@postgres:5432/${POSTGRES_DB:-gestasso_db}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-%kernel.project_dir%/config/jwt/private.pem}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY:-%kernel.project_dir%/config/jwt/public.pem}
      - JWT_PASSPHRASE=${JWT_PASSPHRASE:-gestasso_jwt_passphrase}
      - MAILER_DSN=${MAILER_DSN:-smtp://mailhog:1025}
    depends_on:
      - postgres
      - redis
    networks:
      - gestasso_infra_network

  # Base de données PostgreSQL 16
  postgres:
    image: postgres:16-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-gestasso_infra_postgres}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gestasso_db}
      POSTGRES_USER: ${POSTGRES_USER:-gestasso_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gestasso_password}
      POSTGRES_ROOT_PASSWORD: ${POSTGRES_ROOT_PASSWORD:-root_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - gestasso_infra_network

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME:-gestasso_infra_redis}
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-gestasso_redis_password}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - gestasso_infra_network
  # MailHog pour les tests d'emails
  mailhog:
    image: mailhog/mailhog
    container_name: ${MAILHOG_CONTAINER_NAME:-gestasso_infra_mailhog}
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    networks:
      - gestasso_infra_network

  # Frontend SvelteKit
  frontend:
    image: node:18-alpine
    container_name: ${FRONTEND_CONTAINER_NAME:-gestasso_infra_frontend}
    working_dir: /var/www/frontend
    volumes:
      - ${FRONTEND_PATH:-../frontend}:/var/www/frontend
    ports:
      - "${FRONTEND_DEV_PORT:-5173}:5173"
      - "${FRONTEND_PREVIEW_PORT:-4173}:4173"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_URL=http://localhost:${NGINX_PORT:-8080}/api
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    networks:
      - gestasso_infra_network

  # Worker pour les tâches asynchrones
  worker:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: ${WORKER_CONTAINER_NAME:-gestasso_infra_worker}
    volumes:
      - ${BACKEND_PATH:-../backend}:/var/www/symfony
    environment:
      - APP_ENV=${APP_ENV:-dev}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-gestasso_user}:${POSTGRES_PASSWORD:-gestasso_password}@postgres:5432/${POSTGRES_DB:-gestasso_db}
      - REDIS_URL=redis://redis:6379
    command: php /var/www/symfony/bin/console messenger:consume async -vv
    depends_on:
      - postgres
      - redis
    networks:
      - gestasso_infra_network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  gestasso_infra_network:
    driver: bridge